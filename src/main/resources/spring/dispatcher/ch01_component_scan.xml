<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- @RequestParam, @GetMapping, @PostMapping, @ModelAttribute 자동인식 -->
	<annotation-driven />
	
	<!-- "공유객체고 나발이고 걍 다 디스패처가 생성하게 해라"라는 뜻이 됨 -->
	<!-- <context:component-scan base-package="com.mycompany.webapp"/> -->
	
	<!-- @Controller, @Component를 만나면 해당 어노테이션이 적용된 클래스를 객체로 생성하고,
	@PostConstruct, @PreDestroy, @Resource, @Autowired, @Inject, @Value을 만나면 (생성은 아니고) 자동인식 -->
	<context:component-scan base-package="com.mycompany.webapp">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
	</context:component-scan>
	
	
</beans:beans>
